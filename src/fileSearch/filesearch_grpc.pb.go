// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/filesearch.proto

package fileSearch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSearch_SendFileHashes_FullMethodName      = "/pb.FileSearch/SendFileHashes"
	FileSearch_GetMachinesWithFile_FullMethodName = "/pb.FileSearch/GetMachinesWithFile"
)

// FileSearchClient is the client API for FileSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSearchClient interface {
	SendFileHashes(ctx context.Context, in *FileHashes, opts ...grpc.CallOption) (*Response, error)
	GetMachinesWithFile(ctx context.Context, in *FileHash, opts ...grpc.CallOption) (*FileLocations, error)
}

type fileSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSearchClient(cc grpc.ClientConnInterface) FileSearchClient {
	return &fileSearchClient{cc}
}

func (c *fileSearchClient) SendFileHashes(ctx context.Context, in *FileHashes, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, FileSearch_SendFileHashes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSearchClient) GetMachinesWithFile(ctx context.Context, in *FileHash, opts ...grpc.CallOption) (*FileLocations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileLocations)
	err := c.cc.Invoke(ctx, FileSearch_GetMachinesWithFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSearchServer is the server API for FileSearch service.
// All implementations must embed UnimplementedFileSearchServer
// for forward compatibility.
type FileSearchServer interface {
	SendFileHashes(context.Context, *FileHashes) (*Response, error)
	GetMachinesWithFile(context.Context, *FileHash) (*FileLocations, error)
	mustEmbedUnimplementedFileSearchServer()
}

// UnimplementedFileSearchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSearchServer struct{}

func (UnimplementedFileSearchServer) SendFileHashes(context.Context, *FileHashes) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileHashes not implemented")
}
func (UnimplementedFileSearchServer) GetMachinesWithFile(context.Context, *FileHash) (*FileLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachinesWithFile not implemented")
}
func (UnimplementedFileSearchServer) mustEmbedUnimplementedFileSearchServer() {}
func (UnimplementedFileSearchServer) testEmbeddedByValue()                    {}

// UnsafeFileSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSearchServer will
// result in compilation errors.
type UnsafeFileSearchServer interface {
	mustEmbedUnimplementedFileSearchServer()
}

func RegisterFileSearchServer(s grpc.ServiceRegistrar, srv FileSearchServer) {
	// If the following call pancis, it indicates UnimplementedFileSearchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSearch_ServiceDesc, srv)
}

func _FileSearch_SendFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSearchServer).SendFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSearch_SendFileHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSearchServer).SendFileHashes(ctx, req.(*FileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSearch_GetMachinesWithFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSearchServer).GetMachinesWithFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSearch_GetMachinesWithFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSearchServer).GetMachinesWithFile(ctx, req.(*FileHash))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSearch_ServiceDesc is the grpc.ServiceDesc for FileSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileSearch",
	HandlerType: (*FileSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFileHashes",
			Handler:    _FileSearch_SendFileHashes_Handler,
		},
		{
			MethodName: "GetMachinesWithFile",
			Handler:    _FileSearch_GetMachinesWithFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/filesearch.proto",
}
